/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.24).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.jumbocash.t7.api;

import java.math.BigInteger;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.jumbocash.t7.model.Transaction;
import com.jumbocash.t7.model.User;
import com.jumbocash.t7.model.UserEntityLink;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;

@CrossOrigin
public interface UserApi {

    @Operation(summary = "Link new entity", description = "", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful Operation") })
    @RequestMapping(value = "/user/link",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> linkEntity(@Parameter(in = ParameterIn.DEFAULT, description = "User Entity Link Object.", required=true, schema=@Schema()) @Valid @RequestBody UserEntityLink body);
    
    @Operation(summary = "Add or update user", description = "", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful Operation") })
    @RequestMapping(value = "/user",
    consumes = { "application/json" }, 
    method = RequestMethod.PUT)
    ResponseEntity<User> addOrUpdateUser(@Parameter(in = ParameterIn.DEFAULT, description = "User Object.", required=true, schema=@Schema()) @Valid @RequestBody User user);
    
    @Operation(summary = "Get user's summary information", description = "Summary info for user", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful Operation", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Transaction.class)))) })
    @RequestMapping(value = "/user/summary/{userId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Map<String, BigInteger>> getSummaryInfoByUserId(@Parameter(in = ParameterIn.PATH, description = "User ID", required=true, schema=@Schema()) @PathVariable("userId") BigInteger userId);

}

